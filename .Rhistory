install.packages(c("slidify", "ggplot2", "devtools"))
install.packages("swirl")
library(swirl)
install_from_swirl("R programming")
install_from_swirl("R Programming")
swirl()
TRUE==TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 !=7
!(5 ==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE( 6> 4)
identical ('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
cube <- function (x, n) { x^3}
cube(3)
x <- 1:10
if (x > 5) { x <- 0}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f(3)
z <- 10
f(3)
swirl()
Sys.Date()
mean(c(2, 4 ,5))
submit()
boring_function('My first function!')
boring_function()
boring_function
submit()
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
pate("Programmin", "is", "fun")
paste("Programmin", "is", "fun")
paste("Programming", "is", "fun")
paste("Programming", "is", "fun!")
submit()
submit()
submit()
submit()
telegram(voihan valilyonti)
telegram("voihan valilyonti)
telegram("voihan valilyonti)
telegram("voihan valilyonti")
submit()
mad_libs("hima", "surkea", "talo")
submit()
submit()
"I" %p% "love" %p% "R!"
swirl()
library(swirl)
rm(list=ls())
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals(flags, unique)
unique_vals <- lapply (flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags@population, flags$red, summary)
tapply(flags$population, flags$red, summary)
tapply(flags@population, flags$landmass, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
lapply(iris$Sepal.Length, mean)
tapply(iris$Sepal.Length, iris$virginica, mean)
tapply(iris$Sepal.Length, iris[virginica], mean)
iris
?apply
apply(iris,2, mean)
apply(iris, 2, mean())
apply(iris, 1, mean())
apply(iris, 1, mean)
apply(iris, 2, mean)
apply(iris, 3, mean)
tapply(iris$Sepal.Length, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[, 1:4], 1, mean)
apply(iris, 2, mean)
rowMeans(iris[, 1:4])
colMeans(iris)
apply(iris,1,mean)
apply(iris[, 1:4],2, mean)
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
apply(mtcars,2,mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
mean(mtcars$mpg, mtcars$cyl)
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
lapply(mtcars, mean)
sapply(mtcars, cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$hp, mtcars$cyl, mean)
hps <- tapply(mtcars$hp, mtcars$cyl, mean)
hps
class(hps)
hps[1].hps[3]
hps[1]-hps[3]
hps[3]-hps[1]
setwd("D:/Git/Repos/RProgramming/week3/ProgrammingAssignment2")
ls
x <<- y
set <- function (y)
x <<-y
x
source('D:/Git/Repos/RProgramming/week3/ProgrammingAssignment2/makeVector.R')
makeVector(2)
makeVector(2)
source('D:/Git/Repos/RProgramming/week3/ProgrammingAssignment2/makeVector.R')
makeVector(2)
x
matrix(2)
matrix(2,2)
?matrix
makeVector
vek <- makeVector(3)
vek
vek(2)
vek$set(2)
vek$get(2)
vek$get()
vek$setmean()
vek$setmean(2)
vek$getmean()
vek$set(2,4)
vek$set(2:4)
vek
vek$get()
vek$getmean()
vek$setmean()
vek$setmean(2:4)
vek$getmean()
vek$get()
vek$setmean(2:6)
vek$get()
vek$getmean()
vek$setmean()
vek$setmean(vek)
vek$getmean()
source('D:/Git/Repos/RProgramming/week3/ProgrammingAssignment2/cachematrix.R')
source('D:/Git/Repos/RProgramming/week3/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(2)
makeCacheMatrix(mat)
mat <- makeCacheMatrix(3)
mat
mat$get()
mat <- makeCacheMatrix(nrow = 3, ncol = 3)
mat <- makeCacheMatrix(1:9, nrow = 3, ncol = 3)
x <- makeCacheMatrix(1:9, nrow = 3, ncol = 3)
x <- matrix(1:9, nrow = 3, ncol = 3)
mat <- makeCacheMatrix(x)
mat
get$mat
mat$get()
mat <- makeCacheMatrix()
mat$set
mat$set(1:9)
mat$get()
mat$set(1:9, ncol = 3, nrow = 3)
mat$set(1:9, nrow = 3, ncol = 3)
mat$set(1:9 nrow = 3 ncol = 3)
x
mat$set(x)
x
mat$get()
source('D:/Git/Repos/RProgramming/week3/ProgrammingAssignment2/cachematrix.R')
mat$set(x)
mat$set(1:9 nrow = 3 ncol = 3)
mat$set(1:9, nrow = 3, ncol = 3)
mat$set(0)
mat$get()
mat$set(x)
mat$get()
source('D:/Git/Repos/RProgramming/week3/ProgrammingAssignment2/cachematrix.R')
mat$get()
function (x)
f
function () x
mat$invert()
mat$invert(x)
mat$getinvert()
solve(x)
x <- matrix(data = (1, 2, 1, 2, 5, 0, 3, 3, 8), nrow = 3, ncol = 3)
x <- matrix(data = (1 2 1 2 5 0 3 3 8), nrow = 3, ncol = 3)
x <- matrix(data = (1, 2, 1, 2 5 0 3 3 8), nrow = 3, ncol = 3)
x <- matrix(data = 1, 2, 1, 2, 5, 0, 3, 3, 8, nrow = 3, ncol = 3)
x <- matrix(nrow = 3, ncol = 3)
x
x[1,1] <- 1
x
x[2,1] <- 2
x
x[3,1] <- 1
x[1,2] <- 2
x[2,2] <- 5
x[3,2] <- 0
x[1,3] <- 3
x[2,3] <- 3
x[3,3] <- 8
x
mat$set(x)
mat$get(x)
mat$get()
mat$invert(x)
mat$getinvert()
solve(x)
mat$invert(solve(x))
mat$getinvert()
source('D:/Git/Repos/RProgramming/week3/ProgrammingAssignment2/cachematrix.R')
mat$set(x)
cacheSolve(x)
cacheSolve(mat)
cacheSolve(mat(x))
mat
cacheSolve(mat)
mat <- makeCacheMatrix()
mat$set(x)
mat$getinvert()
cacheSolve()
cacheSolve(x)
cacheSolve(mat)
cacheSolve(mat(x))
source('D:/Git/Repos/RProgramming/week3/ProgrammingAssignment2/makeVector.R')
g <- makeVector
g$set(x)
x
g$set(3)
g
g <- makeVector()
g
g$set(3)
cachemean()
cachemean(g)
g$set(2:4)
cachemean(g)
g$set(1:3)
cachemean(g)
source('D:/Git/Repos/RProgramming/week3/ProgrammingAssignment2/cachematrix.R')
mat <- makeCacheMatrix()
mat$set(x)
mat$get
x
mat
mat$get()
cacheSolve(mat)
mat$invert(3)
cacheSolve(mat)
source('D:/Git/Repos/RProgramming/week3/ProgrammingAssignment2/cachematrix.R')
source('D:/Git/Repos/RProgramming/week3/ProgrammingAssignment2/cachematrix.R')
mat$invert()
source('D:/Git/Repos/RProgramming/week3/ProgrammingAssignment2/cachematrix.R')
mat$invert()
mat$invert(x)
mat$getinvert()
cacheSolve(mat)
mat$get()
solve(x$get())
solve(mat$get())
source('D:/Git/Repos/RProgramming/week3/ProgrammingAssignment2/cachematrix.R')
mat$set(x)
cacheSolve(mat)
source('D:/Git/Repos/RProgramming/week3/ProgrammingAssignment2/cachematrix.R')
mat$set(x)
cacheSolve(mat)
source('D:/Git/Repos/RProgramming/week3/ProgrammingAssignment2/cachematrix.R')
source('D:/Git/Repos/RProgramming/week3/ProgrammingAssignment2/makeVector.R')
f <- [2:4]
f <- (2:4)
f
g$set(f)
g$setmean(f)
g$getmean()
source('D:/Git/Repos/RProgramming/week3/ProgrammingAssignment2/cachematrix.R')
mat
source('D:/Git/Repos/RProgramming/week3/ProgrammingAssignment2/cachematrix.R')
mat$set(x)
cacheSolve(mat)
source('D:/Git/Repos/RProgramming/week3/ProgrammingAssignment2/cachematrix.R')
cacheSolve(mat)
source('D:/Git/Repos/RProgramming/week3/ProgrammingAssignment2/cachematrix.R')
cacheSolve(mat)
source('D:/Git/Repos/RProgramming/week3/ProgrammingAssignment2/cachematrix.R')
source('D:/Git/Repos/RProgramming/week3/ProgrammingAssignment2/cachematrix.R')
